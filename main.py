# This code was generated by ChatGPT as a sample.
# The repoâ€™s purpose is to demonstrate using docker-compose with devcontainer. :)

import os
from typing import List

import redis
from fastapi import Depends, FastAPI, HTTPException
from pydantic import BaseModel
from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import Session, sessionmaker

# Read Postgres + Redis URLs from env
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+psycopg2://dev:dev@db:5432/devdb")
CACHE_URL = os.getenv("CACHE_URL", "redis://redis:6379/0")

# Database
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Redis client
cache = redis.Redis.from_url(CACHE_URL)

app = FastAPI()


# --- Models ---
class UserDB(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    username = Column(String, unique=True, index=True, nullable=False)


class User(BaseModel):
    id: int | None = None
    name: str
    username: str

    class Config:
        orm_mode = True


# --- Dependency ---
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# --- CRUD Endpoints ---
@app.post("/users/", response_model=User)
def create_user(user: User, db: Session = Depends(get_db)):
    db_user = UserDB(name=user.name, username=user.username)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)

    # Cache user
    cache.set(f"user:{db_user.id}", db_user.username)

    return db_user


@app.get("/users/", response_model=List[User])
def read_users(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    return db.query(UserDB).offset(skip).limit(limit).all()


@app.get("/users/{user_id}", response_model=User)
def read_user(user_id: int, db: Session = Depends(get_db)):
    # Try cache first
    cached_username = cache.get(f"user:{user_id}")
    if cached_username:
        return User(id=user_id, name="(cached)", username=cached_username.decode())

    user = db.query(UserDB).filter(UserDB.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user


@app.put("/users/{user_id}", response_model=User)
def update_user(user_id: int, updated: User, db: Session = Depends(get_db)):
    user = db.query(UserDB).filter(UserDB.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    user.name = updated.name
    user.username = updated.username
    db.commit()
    db.refresh(user)

    # Update cache
    cache.set(f"user:{user.id}", user.username)

    return user


@app.delete("/users/{user_id}")
def delete_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(UserDB).filter(UserDB.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    db.delete(user)
    db.commit()

    # Remove from cache
    cache.delete(f"user:{user_id}")

    return {"detail": "User deleted"}


# --- Initialize DB ---
Base.metadata.create_all(bind=engine)
